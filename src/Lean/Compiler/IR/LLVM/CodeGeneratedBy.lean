/-
Copyright (c) 2023 Siddharth Bhat. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Siddharth Bhat
-/
import Lean.Attributes
import Lean.Environment
import Lean.CoreM
import Lean.Compiler.IR.LLVM.Pure
import Lean.Elab.InfoTree.Main

namespace Lean.IR.LLVM.CodeGeneratedBy
open Lean
open Lean.IR.LLVM.Pure

def CodeGenerator : Type := List Reg → BuilderM Reg

instance : Inhabited CodeGenerator where
  default := fun _ => pure (0 : Reg)

-- Unqualified `getEnv` refers to `CompilerM.getEnv`, which
-- assumes the specific `CompilerM` monad stack, instead of implementing
-- `MonadEnv CompilerM`.
-- Thus, we explicitly refer to `MonadEnv.getEnv`
-- TODO: Refactor `CompilerM` to use `MonadEnv`.

private unsafe def lookupCodeGeneratorFromNameUnsafe (name : Name) (env : Environment) (opt : Options) : Except String CodeGenerator := do
  env.evalConst CodeGenerator opt name

/-- Unsafely lookup a declaration, and cast its value into a code generator -/
@[implemented_by lookupCodeGeneratorFromNameUnsafe]
private opaque lookupCodeGeneratorFromName (name : Name) (env : Environment) (opt : Options) : Except String CodeGenerator

open Lean Elab in
builtin_initialize codeGeneratedByAttr : ParametricAttribute Name ← registerParametricAttribute {
    name  := `code_generated_by
    descr := "functions that are code generated by a custom LLVM builder."
    applicationTime := .afterCompilation
    getParam:= fun declName stx => do
      let genNameStx ← Attribute.Builtin.getIdent stx
      let genName ← Elab.resolveGlobalConstNoOverloadWithInfo genNameStx
      let info ← getConstInfo genName
      unless info.type.constName? == some ``Lean.IR.LLVM.CodeGeneratedBy.CodeGenerator do
        throwError "Expected type 'CodeGenerator', found incorrect type '{info.type}'. Invalid code generator declaration at '{declName}', generator: '{genName}'."
      return genName
  }

/-- get the code generator for a given declaration name -/
def getCodeGeneratorFromEnv? (name : Name) (env : Environment) (opt : Options) : Except String (Option CodeGenerator) := do
  match codeGeneratedByAttr.getParam? env name with
  | none => return none
  | some genName => lookupCodeGeneratorFromName genName env opt

end Lean.IR.LLVM.CodeGeneratedBy

